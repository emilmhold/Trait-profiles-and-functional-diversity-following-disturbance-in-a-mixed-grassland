qqline(resid(Max.Height.LMM.2020))
### RUNNING LMM FOR SPECIFIC LEAF AREA ###
SLA.Leaf.LMM.2020 <- lmer(SLA.Leaf~Disturbance+(1|Site), data=CWM.2020)
summary(SLA.Leaf.LMM.2020)
### RUNNING LMM FOR SPECIFIC ROOT LENGTH ###
SRL.LMM.2020 <- lmer(SRL~Disturbance+(1|Site), data=CWM.2020)
### RUNNING LMM FOR CANOPY WIDTH ###
Canopy.W1.LMM.2020 <- lmer(Canopy.W1.Transformed~Disturbance+(1|Site), data=CWM.2020)
summary(Canopy.W1.LMM.2020)
### RUNNING LMM FOR LEAF NITROGEN CONTENT ###
N.shoot.LMM.2020 <- lmer(N.shoot~Disturbance+(1|Site), data=CWM.2020)
summary(N.root.LMM.2020)
### RUNNING LMM FOR ROOT NITROGEN CONTENT ###
N.root.LMM.2020 <- lmer(N.root~Disturbance+(1|Site), data=CWM.2020)
summary(N.root.LMM.2020)
# Checking residuals are normally distributed
qqnorm(resid(N.root.LMM.2020))
qqline(resid(N.root.LMM.2020))
### Making an FEve data frame
FEve_ANR <- fdiv.2020$FEve[seq(1, 24, 2)]
FEve_NNR2 <- fdiv.2020$FEve[seq(2, 24, 2)]
SD_FEveANR <- sd(FEve_ANR)
SD_FEveNNR2 <- sd(FEve_NNR2)
FEve_DataFrame.2020 <- data.frame(AvgFEve = c(mean(FEve_ANR), mean(FEve_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
FEveError = c(SD_FEveANR/sqrt(12), SD_FEveNNR2/sqrt(12)))
print(FEve_DataFrame.2020)
### Making an FEve graph
pEve <- ggplot(FEve_DataFrame.2020, aes(x= Subplot, y= AvgFEve, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgFEve-FEveError, ymax=AvgFEve+FEveError), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(x = "Disturbed vs. undisturbed plot type", y = "Functional evenness") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
pEve
pEve
### Making an FDiv data frame
FDiv_ANR <- fdiv.2020$FDiv[seq(1, 24, 2)]
FDiv_NNR2 <- fdiv.2020$FDiv[seq(2, 24, 2)]
SD_FDivANR <- sd(FDiv_ANR)
SD_FDivNNR2 <- sd(FDiv_NNR2)
FDiv_DataFrame.2020 <- data.frame(AvgFDiv = c(mean(FDiv_ANR), mean(FDiv_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
FDivError = c(SD_FDivANR/sqrt(12), SD_FDivNNR2/sqrt(12)))
print(FDiv_DataFrame.2020)
### Making an FDiv graph
pDiv <- ggplot(FDiv_DataFrame.2020, aes(x= Subplot, y= AvgFDiv, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgFDiv-FDivError, ymax=AvgFDiv+FDivError), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(x = "Disturbed vs. undisturbed plot type", y = "Functional divergence") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
pDiv
### Making an FRic data frame (transformed)
FRic_ANR <- fdiv.2020$Fric_Tansformed[seq(1, 24, 2)]
FRic_NNR2 <- fdiv.2020$Fric_Tansformed[seq(2, 24, 2)]
SD_FRicANR <- sd(FRic_ANR)
SD_FRicNNR2 <- sd(FRic_NNR2)
FRic_DataFrame.2020 <- data.frame(AvgFRic = c(mean(FRic_ANR)*-1, mean(FRic_NNR2)*-1),
Subplot = c("Disturbed", "Undisturbed"),
FRicError = c(SD_FRicANR/sqrt(12), SD_FRicNNR2/sqrt(12)))
print(FRic_DataFrame.2020)
### Making an FRic transformed graph
pRic <- ggplot(FRic_DataFrame.2020, aes(x= Subplot, y= AvgFRic, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgFRic-FRicError, ymax=AvgFRic+FRicError), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(x = "Disturbed vs. undisturbed plot type", y = "Functional richness") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
### Making an Rao's Q data frame
Q_ANR <- fdiv.2020$RaoQ[seq(1, 24, 2)]
Q_NNR2 <- fdiv.2020$RaoQ[seq(2, 24, 2)]
SD_QANR <- sd(Q_ANR)
SD_QNNR2 <- sd(Q_NNR2)
Q_DataFrame.2020 <- data.frame(AvgQ = c(mean(Q_ANR), mean(Q_NNR2)),
Subplot = c("Disturbed", "Unisturbed"),
QError = c(SD_QANR/sqrt(12), SD_QNNR2/sqrt(12)))
print(Q_DataFrame.2020)
### Making an Q transformed graph
pQ<- ggplot(Q_DataFrame.2020, aes(x= Subplot, y= AvgQ, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgQ-QError, ymax=AvgQ+QError), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(x = "Disturbed vs. undisturbed plot type", y = "Rao's quadratic entropy") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
#### Arranging an array of the FD graphs
ggarrange(pRic +
theme(axis.title.x = element_blank()),
pEve +
theme(axis.title.x = element_blank()),
pDiv +
theme(axis.title.x = element_blank()),
pQ +
theme(axis.title.x = element_blank()),
bottom = "Disturbed vs. undisturbed plot type",
nrow = 2)
### Graphs of CWM's (SLA, Leaf N, Root N, height, SRL) ###
### Making an SLA  data frame
SLA_ANR <- CWM.2020$SLA.Leaf[seq(1, 24, 2)]
SLA_NNR2 <- CWM.2020$SLA.Leaf[seq(2, 24, 2)]
SD_SLA.ANR <- sd(SLA_ANR)
SD_SLA.NNR2 <- sd(SLA_NNR2)
SLA_DataFrame.2020 <- data.frame(AvgSLA = c(mean(SLA_ANR), mean(SLA_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
SLA.Error = c(SD_SLA.ANR/sqrt(12), SD_SLA.NNR2/sqrt(12)))
print(SLA_DataFrame.2020)
### Making an SLA graph
pSLA<- ggplot(SLA_DataFrame.2020, aes(x= Subplot, y= AvgSLA, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgSLA-SLA.Error, ymax=AvgSLA+SLA.Error), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(y = "Specific leaf area\n(cm^2/g)") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
### Making an Leaf N  data frame
N.shoot_ANR <- CWM.2020$N.shoot[seq(1, 24, 2)]
N.shoot_NNR2 <- CWM.2020$N.shoot[seq(2, 24, 2)]
SD_Nshoot.ANR <- sd(N.shoot_ANR)
SD_Nshoot.NNR2 <- sd(N.shoot_NNR2)
Nshoot_DataFrame.2020 <- data.frame(AvgNshoot = c(mean(N.shoot_ANR), mean(N.shoot_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
Nshoot.Error = c(SD_Nshoot.ANR/sqrt(12), SD_Nshoot.NNR2/sqrt(12)))
print(Nshoot_DataFrame.2020)
### Making an N.shoot graph
pNshoot<- ggplot(Nshoot_DataFrame.2020, aes(x= Subplot, y= AvgNshoot, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgNshoot-Nshoot.Error, ymax=AvgNshoot+Nshoot.Error), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(y = "Leaf nitrogen\n(%)") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
### Making an Root N  data frame
N.root_ANR <- CWM.2020$N.root[seq(1, 24, 2)]
N.root_NNR2 <- CWM.2020$N.root[seq(2, 24, 2)]
SD_Nroot.ANR <- sd(N.root_ANR)
SD_Nroot.NNR2 <- sd(N.root_NNR2)
Nroot_DataFrame.2020 <- data.frame(AvgNroot = c(mean(N.root_ANR), mean(N.root_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
Nroot.Error = c(SD_Nroot.ANR/sqrt(12), SD_Nroot.NNR2/sqrt(12)))
print(Nroot_DataFrame.2020)
### Making an N.root graph
pNroot<- ggplot(Nroot_DataFrame.2020, aes(x= Subplot, y= AvgNroot, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgNroot-Nroot.Error, ymax=AvgNroot+Nroot.Error), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(y = "Root nitrogen\n(%)") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
# making a height data frame
Height_ANR <- CWM.2020$Max.Height[seq(1, 24, 2)]
Height_NNR2 <- CWM.2020$Max.Height[seq(2, 24, 2)]
SD_Height.ANR <- sd(N.root_ANR)
SD_Height.NNR2 <- sd(N.root_NNR2)
Height_DataFrame.2020 <- data.frame(AvgHeight = c(mean(Height_ANR), mean(Height_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
Height.Error = c(SD_Height.ANR/sqrt(12), SD_Height.NNR2/sqrt(12)))
print(Height_DataFrame.2020)
### Making a height graph
pHeight <- ggplot(Height_DataFrame.2020, aes(x= Subplot, y= AvgHeight, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgHeight-Height.Error, ymax=AvgHeight+Height.Error), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(y = "Max height\n(cm)") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
# making a specific root length data frame
SRL_ANR <- CWM.2020$SRL[seq(1, 24, 2)]
SRL_NNR2 <- CWM.2020$SRL[seq(2, 24, 2)]
SD_SRL.ANR <- sd(SRL_ANR)
SD_SRL.NNR2 <- sd(SRL_NNR2)
SRL_DataFrame.2020 <- data.frame(AvgSRL = c(mean(SRL_ANR), mean(SRL_NNR2)),
Subplot = c("Disturbed", "Undisturbed"),
SRL.Error = c(SD_SRL.ANR/sqrt(12), SD_SRL.NNR2/sqrt(12)))
print(SRL_DataFrame.2020)
### Making an SRL graph
pSRL<- ggplot(SRL_DataFrame.2020, aes(x= Subplot, y= AvgSRL, fill = Subplot)) +
geom_bar(stat = "identity", width=0.9, position=position_dodge()) +
geom_errorbar(aes(x=Subplot, ymin=AvgSRL-SRL.Error, ymax=AvgSRL+SRL.Error), width=0.3, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("gray28", "gray")) +
labs(y = "Specific root length\n(cm/g)") +
theme_classic() +
theme(axis.text = element_text(color = "black"))+
theme(legend.position = "none")
#### Arranging an array of the trait graphs
ggarrange(pSRL +
theme(axis.title.x = element_blank()),
pHeight +
theme(axis.title.x = element_blank()),
pSLA +
theme(axis.title.x = element_blank()),
pNroot +
theme(axis.title.x = element_blank()),
pNshoot +
theme(axis.title.x = element_blank()),
bottom = "Disturbed vs. undisturbed plot type",
nrow = 2)
setwd("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland")
setwd("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland")
####FUNCTIONAL DIVERSITY ####
library(FD)
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))}
####2018 Data prep####
# a) Import trait information
data_traits <- read.csv("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland/Traits_Raw.csv",na.strings=c("NA",""))
data_traits[,c("SpecimenID", "SppCode", "Collector", "Date.collected", "MicrositeID", "flag", "Notes")] <- NULL # Remove metadata I don't need
data_traits[,c("Family","Genus","Species")] <- NULL # Remove taxonomy data I don't need (saved separately anyway)
data_traits[,c("CN.sampleID", "Soil.pH", "pH.Temp", "pH.SoilWeight")] <- NULL # Remove?? extra data that's not really a trait
data_traits[,c("X","X.1","X.2","X.3","X.4","X.5","X.6")] <- NULL
data_traits$Vegetative.Height <- as.numeric(as.character(data_traits$Vegetative.Height))
# Calculate means for leaf area, leaf biomass, and SLA.Leaf
data_traits <- data_traits %>%
dplyr::mutate(SA.Leaf = rowMeans(dplyr::select(., "SA.Leaf1", "SA.Leaf2", "SA.Leaf3"), na.rm=TRUE),
.after=SA.Leaf3) %>%
dplyr::mutate(Biomass.Leaf = rowMeans(dplyr::select(., "Biomass.Leaf1", "Biomass.Leaf2", "Biomass.Leaf3"), na.rm=TRUE),
.after=Biomass.Leaf3) %>%
dplyr::mutate(SLA.Leaf = rowMeans(dplyr::select(., "SLA.Leaf1", "SLA.Leaf2", "SLA.Leaf3"), na.rm=TRUE),
.after=SLA.Leaf3) %>%
tibble::column_to_rownames("ShortID") %>%
as.data.frame()
data_traits[,c("SA.Leaf1", "SA.Leaf2", "SA.Leaf3", "Biomass.Leaf1", "Biomass.Leaf2", "Biomass.Leaf3",
"SLA.Leaf1", "SLA.Leaf2", "SLA.Leaf3")] <- NULL
data_traits[is.nan(data_traits)] <- NA
#Import 2018 abundance data
abundance_data.2018 <- read.csv("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland/AbundanceData2018.csv", na.strings=c("NA",""))
abundance_data.2018 <- abundance_data.2018 %>% filter(Community != "N/A")
abundance_data.2018["Community"] <- NULL
View(abundance_data.2018)
# Subset the trait information to only those species present in the 2018 data
data_traits <- subset(data_traits, Epithey %in% colnames(abundance_data.2018))
data_traits$Epithey <- factor(data_traits$Epithey)
View(data_traits)
sites <- as.character(data_traits$SiteName)
data_traits$SiteName <- NULL
# -Calculate Z-scores and remove outliers. #
# Calculate Z-scores for each measurement for each species.
data_traits.zscore <- data_traits %>%
dplyr::group_by(Epithey) %>%  # Group by species ID
dplyr::mutate(dplyr::across(where(is.numeric), scale)) %>% # Calculate Z-score
dplyr::ungroup() %>% # Ungroup
tibble::add_column(., SiteName = sites, .before=1) %>%
as.data.frame()
rownames(data_traits.zscore) <- rownames(data_traits)
data_traits.zscore[is.nan(data_traits.zscore)] <- NA
data_traits <- tibble::add_column(data_traits, SiteName = sites, .before=1)
# Replace all trait values that have Z-scores > |3| with NA.
data_traits.outlier.rm <- data_traits
for(i in 3:ncol(data_traits.zscore)){
for(j in 1:nrow(data_traits.zscore)){
if(is.na(data_traits.zscore[j,i])=="FALSE" & abs(data_traits.zscore[j,i]) > 3){
data_traits.outlier.rm[j,i] <- NA
}
}
}
data_traits.avg.all <- data_traits.outlier.rm %>%
dplyr::group_by(Epithey) %>%
dplyr::summarise_if(is.numeric, mean, na.rm=TRUE) %>%
as.data.frame()
data_traits.avg.all[is.nan(data_traits.avg.all)] <- NA
# Are there any species in the cover data that are NOT in the trait data?
df <- data.frame(Epithey = colnames(abundance_data.2018),
Trait = colnames(abundance_data.2018) %in% data_traits.avg.all$Epithey)
print(as.character(subset(df, Trait=="FALSE")$Epithey)) # There is no trait data for these taxa.
rm(df)
# Calculate average trait values at Kinsella only.
data_traits.avg.Kin <- subset(data_traits.outlier.rm, SiteName=="Kin")
data_traits.avg.Kin <- data_traits.avg.Kin %>%
dplyr::group_by(Epithey) %>%
dplyr::summarise_if(is.numeric, mean, na.rm=TRUE) %>%
as.data.frame()
data_traits.avg.Kin[is.nan(data_traits.avg.Kin)] <- NA
# What species are present in the cover data, but do not have any trait information at Kinsella?
df <- data.frame(Epithey = colnames(abundance_data.2018),
Kinsella = colnames(abundance_data.2018) %in% data_traits.avg.Kin$Epithey)
as.character(subset(df, Kinsella=="FALSE")$Epithey) # Kinsella has no trait data for these taxa.
rm(df)
# Making rownames into species for all and kinsella avg traits
rownames(data_traits.avg.all) <- data_traits.avg.all[,"Epithey"]
data_traits.avg.all[,"Epithey"] <- NULL
rownames(data_traits.avg.Kin) <- data_traits.avg.Kin[,"Epithey"]
data_traits.avg.Kin[,"Epithey"] <- NULL
####2018 FUNCTIONAL DIVERSITY ####
# Check for highly correlated traits.
corr <- Hmisc::rcorr(as.matrix(data_traits.avg.all), type = "spearman")
corr <- corr[["r"]]
View(corr)
### match up trait and weight data frames
traits <- data_traits.avg.Kin # trait data: species are rows and traits are columns
traits[,c("Vegetative.Height", "Canopy.W2", "Stem.Volume","Epithey")] <- NULL # Drop traits that I don't want in my Fdiv calculation
weights <- abundance_data.2018 # rows are sites and species are columns
traits <- subset(traits, rownames(traits) %in% colnames(abundance_data.2018)) # Subset traits to only species present in abundance data
traits <- traits[order(match(rownames(traits), colnames(weights))), ] # Make sure the two data frames are in the same order
### calculate fdiv
fdiv_results.2018 <- dbFD(traits, weights, stand.x=TRUE, corr="none") # Calculate diversity. "stand.x=TRUE" standardizes traits to mean 0 and unit variance.
View(fdiv_results.2018)
qual.Fric.2018 <- fdiv_results.2018$qual.FRic
View(qual.Fric.2018)
fdiv.2018 <- data.frame( # Extract the measurements that I want to use in downstream analyses.
no.spp = fdiv_results.2018$nbsp,
FRic = fdiv_results.2018$FRic,
FEve = fdiv_results.2018$FEve,
FDiv = fdiv_results.2018$FDiv,
FDis = fdiv_results.2018$FDis,
RaoQ = fdiv_results.2018$RaoQ
)
view(fdiv.2018)
### Take community weighted means
CWM.2018 = fdiv_results.2018$CWM # Extract a separate data frame of community-weighted means
View(CWM.2018)
#### 2020 Data Prep ####
# Data prep
# a) Import trait information
data_traits <- read.csv("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland/Traits_Raw.csv",na.strings=c("NA",""))
data_traits[,c("SpecimenID", "SppCode", "Collector", "Date.collected", "MicrositeID", "flag", "Notes")] <- NULL # Remove metadata I don't need
data_traits[,c("Family","Genus","Species")] <- NULL # Remove taxonomy data I don't need (saved separately anyway)
data_traits[,c("CN.sampleID", "Soil.pH", "pH.Temp", "pH.SoilWeight")] <- NULL # Remove?? extra data that's not really a trait
data_traits[,c("X","X.1","X.2","X.3","X.4","X.5","X.6")] <- NULL
data_traits$Vegetative.Height <- as.numeric(as.character(data_traits$Vegetative.Height))
# Calculate means for leaf area, leaf biomass, and SLA.Leaf
data_traits <- data_traits %>%
dplyr::mutate(SA.Leaf = rowMeans(dplyr::select(., "SA.Leaf1", "SA.Leaf2", "SA.Leaf3"), na.rm=TRUE),
.after=SA.Leaf3) %>%
dplyr::mutate(Biomass.Leaf = rowMeans(dplyr::select(., "Biomass.Leaf1", "Biomass.Leaf2", "Biomass.Leaf3"), na.rm=TRUE),
.after=Biomass.Leaf3) %>%
dplyr::mutate(SLA.Leaf = rowMeans(dplyr::select(., "SLA.Leaf1", "SLA.Leaf2", "SLA.Leaf3"), na.rm=TRUE),
.after=SLA.Leaf3) %>%
tibble::column_to_rownames("ShortID") %>%
as.data.frame()
data_traits[,c("SA.Leaf1", "SA.Leaf2", "SA.Leaf3", "Biomass.Leaf1", "Biomass.Leaf2", "Biomass.Leaf3",
"SLA.Leaf1", "SLA.Leaf2", "SLA.Leaf3")] <- NULL
data_traits[is.nan(data_traits)] <- NA
#Import abundance data
abundance_data.2020 <- read.csv("~/Documents/GitHub/Trait-profiles-and-functional-diversity-following-disturbance-in-a-mixed-grassland/Trait profiles and functional diversity following disturbance in a mixed grassland/AbundanceData2020.csv", na.strings=c("NA",""))
abundance_data.2020 <- abundance_data.2020 %>% filter(Community != "N/A")
abundance_data.2020["Community"] <- NULL
View(abundance_data.2020)
# Subset the trait information to only those species present in the data that I'm using.
data_traits <- subset(data_traits, Epithey %in% colnames(abundance_data.2020))
data_traits$Epithey <- factor(data_traits$Epithey)
sites <- as.character(data_traits$SiteName)
data_traits$SiteName <- NULL
# -Calculate Z-scores and remove outliers. #
# Calculate Z-scores for each measurement for each species.
data_traits.zscore <- data_traits %>%
dplyr::group_by(Epithey) %>%  # Group by species ID
dplyr::mutate(dplyr::across(where(is.numeric), scale)) %>% # Calculate Z-score
dplyr::ungroup() %>% # Ungroup
tibble::add_column(., SiteName = sites, .before=1) %>%
as.data.frame()
rownames(data_traits.zscore) <- rownames(data_traits)
data_traits.zscore[is.nan(data_traits.zscore)] <- NA
data_traits <- tibble::add_column(data_traits, SiteName = sites, .before=1)
# Replace all trait values that have Z-scores > |3| with NA.
data_traits.outlier.rm <- data_traits
for(i in 3:ncol(data_traits.zscore)){
for(j in 1:nrow(data_traits.zscore)){
if(is.na(data_traits.zscore[j,i])=="FALSE" & abs(data_traits.zscore[j,i]) > 3){
data_traits.outlier.rm[j,i] <- NA
}
}
}
data_traits.avg.all <- data_traits.outlier.rm %>%
dplyr::group_by(Epithey) %>%
dplyr::summarise_if(is.numeric, mean, na.rm=TRUE) %>%
as.data.frame()
data_traits.avg.all[is.nan(data_traits.avg.all)] <- NA
# Are there any species in the cover data that are NOT in the trait data?
df <- data.frame(Epithey = colnames(abundance_data.2020),
Trait = colnames(abundance_data.2020) %in% data_traits.avg.all$Epithey)
print(as.character(subset(df, Trait=="FALSE")$Epithey)) # There is no trait data for these taxa: Collin, Genama, Silvery.hairy.mustard, Weed.1
rm(df)
data_traits.avg.Kin <- subset(data_traits.outlier.rm, SiteName=="Kin")
data_traits.avg.Kin <- data_traits.avg.Kin %>%
dplyr::group_by(Epithey) %>%
dplyr::summarise_if(is.numeric, mean, na.rm=TRUE) %>%
as.data.frame()
data_traits.avg.Kin[is.nan(data_traits.avg.Kin)] <- NA
# What species are present in the cover data, but do not have any trait information at Kinsella?
df <- data.frame(Epithey = colnames(abundance_data.2020),
Kinsella = colnames(abundance_data.2020) %in% data_traits.avg.Kin$Epithey)
as.character(subset(df, Kinsella=="FALSE")$Epithey) # Kinsella has no trait data for these taxa: Cirvul, Collin, Genama, Silvery.hairy.mustard, Sonarv, Weed.1
rm(df)
# What species are present in the total averages but not the Kinsella averages? Cirvul and Sonarv
setdiff(data_traits.avg.all$Epithey, data_traits.avg.Kin$Epithey)
# Making rownames into species for all and kinsella avg traits
rownames(data_traits.avg.all) <- data_traits.avg.all[,"Epithey"]
data_traits.avg.all[,"Epithey"] <- NULL
rownames(data_traits.avg.Kin) <- data_traits.avg.Kin[,"Epithey"]
data_traits.avg.Kin[,"Epithey"] <- NULL
# Check for highly correlated traits.
corr <- Hmisc::rcorr(as.matrix(data_traits.avg.all), type = "spearman")
corr <- corr[["r"]]
### match up trait and weight data frames
traits <- data_traits.avg.Kin # trait data: species are rows and traits are columns
traits[,c("Vegetative.Height", "Canopy.W2", "Stem.Volume","Epithey")] <- NULL # Drop traits that I don't want in my Fdiv calculation
weights <- abundance_data.2020 # rows are sites and species are columns
traits <- subset(traits, rownames(traits) %in% colnames(abundance_data.2020)) # Subset traits to only species present in abundance data
traits <- traits[order(match(rownames(traits), colnames(weights))), ] # Make sure the two data frames are in the same order
### removed species with no kinsella trait data from weights #not working yet
weights <- weights %>% select (-c(Cirvul, Collin, Genama, Silvery.hairy.mustard, Sonarv, Weed.1))
### calculate fdiv
fdiv_results.2020 <- dbFD(traits, weights, stand.x=TRUE, corr="none") # Calculate diversity. "stand.x=TRUE" standardizes traits to mean 0 and unit variance.
library(dplyr)
### removed species with no kinsella trait data from weights #not working yet
weights <- weights %>% select (-c(Cirvul, Collin, Genama, Silvery.hairy.mustard, Sonarv, Weed.1))
### removed species with no kinsella trait data from weights #not working yet
weights <- weights %>% dplyr::select (-c(Cirvul, Collin, Genama, Silvery.hairy.mustard, Sonarv, Weed.1))
### calculate fdiv
fdiv_results.2020 <- dbFD(traits, weights, stand.x=TRUE, corr="none") # Calculate diversity. "stand.x=TRUE" standardizes traits to mean 0 and unit variance.
View(fdiv_results.2020)
site <- c("Site2", "Site2", "Site3", "Site3", "Site4", "Site4","Site5", "Site5", "Site6", "Site6", "Site7", "Site7", "Site11", "Site11", "Site12", "Site12", "Site14", "Site14", "Site15", "Site15", "Site16", "Site16", "Site17", "Site17")
disturbance <- c("ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2")
fric_tansformed <- log(fdiv_results.2020$FRic)
fdiv.2020 <- data.frame( # Extract the measurements that I want to use in downstream analyses.
no.spp = fdiv_results.2020$nbsp,
FRic = fdiv_results.2020$FRic,
Fric_Tansformed = fric_tansformed,
FEve = fdiv_results.2020$FEve,
FDiv = fdiv_results.2020$FDiv,
FDis = fdiv_results.2020$FDis,
RaoQ = fdiv_results.2020$RaoQ,
Disturbance = disturbance,
Site = site
)
View(fdiv.2020)
### Take community weighted means
CWM.2020 = fdiv_results.2020$CWM # Extract a separate data frame of community-weighted means
View(CWM.2020)
### Adding site and disturbance level to the CWM traits
site <- c("Site2", "Site2", "Site3", "Site3", "Site4", "Site4","Site5", "Site5", "Site6", "Site6", "Site7", "Site7", "Site11", "Site11", "Site12", "Site12", "Site14", "Site14", "Site15", "Site15", "Site16", "Site16", "Site17", "Site17")
disturbance <- c("ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2", "ANR", "NNR2")
Canopy.W1.transformed <- log(CWM.2020$Canopy.W1)
Root.avgdiam.transformed <- log(CWM.2020$Root.AvgDiam)
CWM.2020 = data.frame(fdiv_results.2020$CWM, Site = site, Disturbance = disturbance, Canopy.W1.Transformed = Canopy.W1.transformed, Root.AvgDiam.Transformed = Root.avgdiam.transformed)
### RUNNING LM FOR NORMALIZED FRIC ###
FRic.LM.2020 <- lm(Fric_Tansformed~Disturbance, data=fdiv.2020)
summary(FRic.LM.2020)
summary(FRic.LMM.2020)
summary(Max.Height.LMM.2020)
### RUNNING LMM FOR MAX HEIGHT ###
Max.Height.LMM.2020 <- lmer(Max.Height~Disturbance+(1|Site), data=CWM.2020)
summary(Max.Height.LMM.2020)
### RUNNING LMM FOR SPECIFIC LEAF AREA ###
SLA.Leaf.LMM.2020 <- lmer(SLA.Leaf~Disturbance+(1|Site), data=CWM.2020)
summary(SLA.Leaf.LMM.2020)
### RUNNING LMM FOR SPECIFIC ROOT LENGTH ###
SRL.LMM.2020 <- lmer(SRL~Disturbance+(1|Site), data=CWM.2020)
summary(SRL.LMM.2020)
### RUNNING LMM FOR CANOPY WIDTH ###
Canopy.W1.LMM.2020 <- lmer(Canopy.W1.Transformed~Disturbance+(1|Site), data=CWM.2020)
summary(Canopy.W1.LMM.2020)
### RUNNING LMM FOR LEAF NITROGEN CONTENT ###
N.shoot.LMM.2020 <- lmer(N.shoot~Disturbance+(1|Site), data=CWM.2020)
summary(N.shoot.LMM.2020)
### RUNNING LMM FOR ROOT NITROGEN CONTENT ###
N.root.LMM.2020 <- lmer(N.root~Disturbance+(1|Site), data=CWM.2020)
summary(N.root.LMM.2020)
### RUNNING LMM FOR NORMALIZED FRIC ###
FRic.LMM.2020 <- lmer(Fric_Tansformed~Disturbance+(1|Site), data=fdiv.2020)
summary(FRic.LMM.2020)
### RUNNING LMM FOR FDIV ###
FDiv.LMM.2020 <- lmer(FDiv~Disturbance+(1|Site), data=fdiv.2020)
summary(FDiv.LMM.2020)
### RUNNING LMM FOR FEVE ###
FEve.LMM.2020 <- lmer(FEve~Disturbance+(1|Site), data=fdiv.2020)
summary(FEve.LMM.2020)
### RUNNING LMM FOR RAOQ ###
RaoQ.LMM.2020 <- lmer(RaoQ~Disturbance+(1|Site), data=fdiv.2020)
summary(RaoQ.LMM.2020)
### RUNNING LMM FOR FDIV ###
FDiv.LMM.2020 <- lmer(FDiv~Disturbance+(1|Site), data=fdiv.2020)
summary(FDiv.LMM.2020)
### RUNNING LM FOR NORMALIZED FRIC ###
FRic.LM.2020 <- lm(Fric_Tansformed~Disturbance, data=fdiv.2020)
summary(FRic.LM.2020)
### LM FOR FEVE ###
FEve.LM.2020 <- lm(FEve~Disturbance, data=fdiv.2020)
summary(FEve.LM.2020)
### LM FOR FDIV ###
FDiv.LM.2020 <- lm(FDiv~Disturbance, data=fdiv.2020)
summary(FDiv.LM.2020)
### LM FOR RAOQ ###
RaoQ.LM.2020 <- lm(RaoQ~Disturbance, data=fdiv.2020)
summary(RaoQ.LM.2020)
### 2020 Community Weighted Mean Traits ###
### LM FOR MAX HEIGHT ###
Max.Height.LM.2020 <- lm(Max.Height~Disturbance, data=CWM.2020)
summary(Max.Height.LM.2020)
### LM FOR SPECIFIC LEAF AREA ###
SLA.Leaf.LM.2020 <- lm(SLA.Leaf~Disturbance, data=CWM.2020)
summary(SLA.Leaf.LM.2020)
### RUNNING LM FOR SPECIFIC ROOT LENGTH ###
SRL.LM.2020 <- lm(SRL~Disturbance, data=CWM.2020)
summary(SRL.LM.2020)
### RUNNING LM FOR LEAF NITROGEN CONTENT ###
N.shoot.LM.2020 <- lm(N.shoot~Disturbance, data=CWM.2020)
summary(N.shoot.LM.2020)
### RUNNING LM FOR ROOT NITROGEN CONTENT ###
N.root.LM.2020 <- lm(N.root~Disturbance, data=CWM.2020)
summary(N.root.LM.2020)
